#!/usr/bin/env bash
set -euo pipefail

usage() { echo "Usage: $0 [--ignore path[,path...]] <git-repo-url|local-path>"; exit 1; }

# ── option parsing ────────────────────────────────────────────────────────────
declare -a IGNORE=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --ignore) shift || usage
              IFS=',' read -ra tmp <<<"$1"
              IGNORE+=("${tmp[@]}"); shift ;;
    -*)       usage ;;
    *)        break ;;
  esac
done
[[ $# -eq 1 ]] || usage
INPUT=$1

# ── helpers ───────────────────────────────────────────────────────────────────
_is_text() { [ -f "$1" ] && grep -Iq . "$1" >/dev/null 2>&1; }
_skip()   { for p in "${IGNORE[@]-}"; do [[ -n $p && $1 == $p* ]] && return 0; done; return 1; }
_dump()   { printf '\n<<< FILE: %s >>>\n' "$1"; cat "$2"; printf '\n<<< END OF %s >>>\n' "$1"; }

# ── prepare working tree (clone if needed) ────────────────────────────────────
CLEAN=false
if [ -d "$INPUT" ]; then
  WORK=$(realpath "$INPUT")
else
  WORK=$(mktemp -d)
  git clone --depth=1 "$INPUT" "$WORK"
  CLEAN=true
fi
trap '[[ $CLEAN == true ]] && rm -rf "$WORK"' EXIT

# ── build list of candidate files (relative paths) ────────────────────────────
if git -C "$WORK" rev-parse --is-inside-work-tree &>/dev/null; then
  ROOT=$(git -C "$WORK" rev-parse --show-toplevel)
  cd "$ROOT"
  SUBDIR=${WORK#"$ROOT"/};                                   # "" if WORK==ROOT
  PREFIX=$([ -n "$SUBDIR" ] && echo "$SUBDIR/")
  git ls-files --cached --others --exclude-standard -- "$SUBDIR" |
    sed "s#^$PREFIX##"                                     # strip leading subdir/
else
  find "$WORK" -type f ! -path '*/.git/*' | sed "s#^$WORK/##"
fi |
  sort | while IFS= read -r rel; do
    _skip "$rel" && continue
    path="$WORK/$rel"
    _is_text "$path" || continue
    _dump "$rel" "$path"
  done
